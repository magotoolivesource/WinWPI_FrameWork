@startuml
!theme plain
skinparam classAttributeIconSize 0
left to right direction
class "Vec2" as C_0016480947060394780245
class C_0016480947060394780245 {
+Vec2() : void
+Vec2(float x, float y) : void
+Vec2(const Vec2 & other) : void
..
+operator*(float scalar) const : Vec2
+operator*(const Vec2 & other) const : Vec2
+operator*=(float scalar) : Vec2
+operator+(const Vec2 & other) const : Vec2
+operator+=(const Vec2 & other) : Vec2
+operator+=(float scalar) : Vec2
+operator-(const Vec2 & other) const : Vec2
+operator-() const : Vec2
+operator-=(const Vec2 & other) : Vec2
+operator/(float scalar) const : Vec2
+operator/(const Vec2 & other) const : Vec2
+operator/=(float scalar) : Vec2
+operator==(const Vec2 & other) const : bool
..
+Abs() const : Vec2
+Ceil() const : Vec2
+Clamp(const Vec2 & min, const Vec2 & max) const : Vec2
+Dot(const Vec2 & other) const : float
+Floor() const : Vec2
+Length() const : float
+LengthSquared() const : float
+Lerp(const Vec2 & other, float t) const : Vec2
+Max(const Vec2 & other) const : Vec2
+Min(const Vec2 & other) const : Vec2
+Normalize() const : Vec2
+Perpendicular() const : Vec2
+Project(const Vec2 & other) const : Vec2
+Reflect(const Vec2 & normal) const : Vec2
+Rotate(float angleDegrees) const : Vec2
+Round() const : Vec2
__
+x : float
+y : float
}
class "Rect" as C_0008364433741114752039
class C_0008364433741114752039 {
+Intersects(const Rect & other) : bool
__
+height : float
+pos : Vec2
+width : float
}
class "Component" as C_0012021292812520796288
class C_0012021292812520796288 {
+~Component() : void
..
+Destroy() : void
+Initialize() : void
+Initialize_AddCompoment() : void
+IsEnabled() const : bool
+Release() : void
+Render(HDC hdc) : void
+SetEnabled(bool e) : void
+Start() : void
+Update(float dt) : void
__
#enabled : bool
+owner : GameObject *
+transform : Transform *
}
class "Gdiplus::Image" as C_0000370005033936394450
class C_0000370005033936394450 {
__
}
class "Camera" as C_0006111862596534002478
class C_0006111862596534002478 {
+Camera() : void
+~Camera() : void
..
+ApplyToMatrix(Gdiplus::Matrix & matrix) const : void
+ApplyToPoint(const Vec2 & worldPos) const : Vec2
+Begin_Update_GraphicsMatrix(Gdiplus::Graphics & graphics, Transform * p_transform, bool p_iscameramat = true, bool p_issmooth = true) : void
+Destroy() : void
+End_Update_GraphicsMatrix(Gdiplus::Graphics & graphics, Transform * p_transform) : void
+GetCameraWorldMatrix() : Gdiplus::Matrix &
+GetMultiplyMatrix(Gdiplus::Matrix & matrix) : Gdiplus::Matrix &
+GetWorldPos() const : Vec2 &
+GetWorldRotation() const : float
+GetZoom() : float
+Initialize() : void
+Initialize_AddCompoment() : void
+MarkDirty() : void
+Release() : void
+Render(HDC hdc) : void
+SetLocalPosition(const Vec2 & pos) : void
+SetLocalPosition(float p_x, float p_y) : void
+SetWorldPosition(Vec2 & pos) : void
+SetWorldPosition(float p_x, float p_y) : void
+SetWorldRotation(float p_rot) : void
+SetZoom(float z) : void
+Start() : void
+Update(float dt) : void
+UpdateIfDirty() : void
__
#cachedCameraWorldMatrix : Gdiplus::Matrix
#cachedWorldDepth : float
#cachedWorldPosition : Vec2
#cachedWorldRotation : float
#cachedWorldScale : Vec2
#isDirty : bool
#zoom : float
}
class "GameObject" as C_0010250684592540512228
class C_0010250684592540512228 {
+GameObject() : void
+~GameObject() : void
..
+AddComponent<T,Args...>(Args &&... args) : T *
+AddTag(const std::string & tag) : void
+GetComponent<T>() : T *
+GetName() const : const std::string &
+HasTag(const std::string & tag) const : bool
#InitCreateTransform() : void
#Initialize() : void
+IsActive() const : bool
+RemoveComponent<T,Args...>() : _Bool
+Render(HDC hdc) : void
+SetActive(bool a) : void
+SetName(const std::string & n) : void
+Start() : void
+Update(float dt) : void
__
#active : bool
#components : std::unordered_map<std::type_index,std::unique_ptr<Component>>
#name : std::string
#tags : std::unordered_set<std::string>
+transform : Transform *
}
enum "MatrixElements" as C_0009743155639492764517
enum C_0009743155639492764517 {
m11
m12
m21
m22
dx
dy
Size
}
enum "TransformSpace" as C_0011529733206085767575
enum C_0011529733206085767575 {
Local
World
}
class "Transform" as C_0013979161094353040123
class C_0013979161094353040123 {
#Transform() = default : void
..
+GetDepth() const : float
+GetPivotPos() : Vec2 &
+GetWorldDepth() : float
+GetWorldMatrix() : Gdiplus::Matrix &
+GetWorldPosition() : Vec2 &
+GetWorldRotation() : float
+GetWorldScale() : Vec2 &
#MarkDirty() : void
+SetDepth(float d) : void
+SetLocalRotation(float angleDegrees) : void
+SetLocalScale(Vec2 scale) : void
+SetLocalScale(float p_scalex, float p_scaley) : void
+SetParent(Transform * newParent) : void
+SetPivotPos(const Vec2 & pivot) : void
+SetPivotPos(float x, float y) : void
+SetWorldPosition(Vec2 & p_wpos) : void
+SetWorldPosition(float p_x, float p_y) : void
+SetWorldRotation(float worldAngle) : void
+SetWorldScale(float p_xscale, float p_yscale) : void
+SetWorldScale(Vec2 & worldScale) : void
+UpdateAllPositions() : void
#UpdateIfDirty() : void
+getHeight() const : float
+getLocalPosition() const : Vec2
+getRotation() : float
+getWidth() const : float
+setHeight(float h) : void
+setLocalPosition(const Vec2 & pos) : void
+setLocalPosition(float p_x, float p_y) : void
+setWidth(float w) : void
__
+PivotPos : Vec2
+cachedPivotPos : Vec2
-cachedWorldDepth : float
-cachedWorldMatrix : Gdiplus::Matrix
-cachedWorldPosition : Vec2
-cachedWorldRotation : float
-cachedWorldScale : Vec2
-children : std::vector<Transform *>
+height : float
-isDirty : bool
+localScale : Vec2
+local_rotation : float
+localposition : Vec2
-m_TempCalcMatrix : Gdiplus::Matrix
-m_tempcachedmatrix : float[6]
-parent : Transform *
+width : float
+zdepth : float
}
class "SingletonT<T>" as C_0011044441207668165372
class C_0011044441207668165372 {
#SingletonT() = default : void
#SingletonT(const SingletonT<T> &) = deleted : void
#~SingletonT() = default : void
..
#operator=(const SingletonT<T> &) = deleted : SingletonT<T> &
..
+DestroyManager() : void
{static} +GetI() : T *
+Initialize() : void
{static} +Instance() : T &
__
{static} -instance : T *
}
class "SingletonT<CameraManager>" as C_0013661311382128640226
class C_0013661311382128640226 {
__
}
class "CameraManager" as C_0010602408877764505757
class C_0010602408877764505757 {
+CameraManager() : void
+~CameraManager() : void
..
+AddCamera(const std::string & name = "") : Camera *
+AddMainCamera() : Camera *
+GetMainCamera() : Camera *
+GetViewportCenter() : Vec2 &
+GetWindowSize() : Vec2 &
+SetWindowSize(HWND hwnd) : void
#UpdateViewportSize() : void
__
#m_AllCameraVec : std::vector<Camera *>
#m_MainCamera : Camera *
#m_ViewportCenter : Vec2
#m_WindowSize : Vec2
#m_hWnd : HWND
}
class "LineSegment" as C_0012662634402439666456
class C_0012662634402439666456 {
__
+p1 : Vec2
+p2 : Vec2
}
abstract "Collider" as C_0014710440344490690589
abstract C_0014710440344490690589 {
+Collider(Vec2 pos, float rot, SizeF s) : void
+~Collider() : void
..
{abstract} +CollidesWith(Collider * other) = 0 : bool
{abstract} +CollidesWith(const Vec2 & point) = 0 : bool
{abstract} +CollidesWith(const LineSegment & line) = 0 : bool
{abstract} +CollidesWithBox(BoxCollider * box) = 0 : bool
+GetInverseTransformMatrix(Gdiplus::Matrix * p_matrix) : Gdiplus::Status
+GetWorldRect() : Gdiplus::RectF
+Intersects(Collider * other) : bool
+InverseTransformPoint(const Vec2 & point) : Vec2
__
#m_TempCalcMatrix : Gdiplus::Matrix
#m_tempcachedmatrix : float[6]
}
class "BoxCollider" as C_0005411490672434116202
class C_0005411490672434116202 {
+BoxCollider(Vec2 pos, float rot, SizeF s, float w, float h) : void
+~BoxCollider() : void
..
+CollidesWith(Collider * other) : bool
+CollidesWith(const Vec2 & point) : bool
+CollidesWith(const LineSegment & line) : bool
+CollidesWithBox(BoxCollider * other) : bool
+GetWorldCorners() const : std::vector<Vec2>
__
+height : float
+width : float
}
class "ImageComponent" as C_0007426470158294810457
class C_0007426470158294810457 {
+ImageComponent() : void
+ImageComponent(Gdiplus::Image * p_img, int p_width, int p_height, bool p_useDrawRect) : void
+~ImageComponent() : void
..
+Draw(HDC hdc) : void
+GetISDebugBoundBox() const : bool
+ImageLoadImage(const std::wstring & path) : bool
+Initialize() : void
+Initialize_AddCompoment() : void
+Render(HDC hdc) : void
+SetDrawRect(int left, int top, int right, int bottom) : void
+SetISDebugBoundBox(bool value) : void
+SetSize(int width, int height) : void
+Update(float dt) : void
__
-drawHeight : int
-drawRect : RECT
-drawWidth : int
-image : Gdiplus::Image *
-m_DebugBoundBox : Gdiplus::RectF
-m_ISDebugBoundBox : bool
-m_TempTransMatrix : Gdiplus::Matrix
-matrixElements : Gdiplus::REAL[6]
-transform : Transform *
-useDrawRect : bool
}
class "SingletonT<ImageManager>" as C_0011492085545754070408
class C_0011492085545754070408 {
__
}
class "ImageManager" as C_0017393003743977498017
class C_0017393003743977498017 {
+~ImageManager() : void
..
+Load(const std::wstring & path) : Gdiplus::Image *
__
-imageMap : std::unordered_map<std::wstring,Gdiplus::Image *>
}
class "DebugObject" as C_0013047365441492111311
class C_0013047365441492111311 {
+DebugObject() : void
+~DebugObject() constexpr = default : void
..
+IsActive() const : bool
+Render(HDC hdc) : void
+SetActive(bool a) : void
+Start() : void
+Update(float dt) : void
__
#active : bool
}
class "DebugLineComponent" as C_0017289291423747156513
class C_0017289291423747156513 {
+DebugLineComponent() = default : void
+DebugLineComponent(const Vec2 & p_start, const Vec2 & p_end, Gdiplus::Color c = Gdiplus::Color(255, 255, 0, 0), float thick = 1.0f) : void
+~DebugLineComponent() = default : void
..
+GetColor() const : Gdiplus::Color
+GetIsCameraMatrix() const : bool
+GetIsTransformMatrix() const : bool
+GetLine(Vec2 & p_start, Vec2 & p_end) const : void
+GetThickness() const : float
+Render(HDC hdc) : void
+SetColor(Gdiplus::Color c) : void
+SetIsCameraMatrix(bool v) : void
+SetIsTransformMatrix(bool v) : void
+SetLine(const Vec2 & p_start, const Vec2 & p_end) : void
+SetThickness(float t) : void
+Start() : void
+Update(float dt) : void
__
#color : Gdiplus::Color
#enabled : bool
#endPoint : Vec2
#m_ISCameraMatrix : bool
#m_ISTransformMatrix : bool
#rect : Gdiplus::RectF
#startPoint : Vec2
#thickness : float
}
class "DebugRectLineComponent" as C_0013402360081878303675
class C_0013402360081878303675 {
+DebugRectLineComponent() = default : void
+DebugRectLineComponent(const Gdiplus::RectF & r, Gdiplus::Color c = Gdiplus::Color(255, 255, 0, 0), float thick = 1.0f) : void
+~DebugRectLineComponent() = default : void
..
+GetColor() const : Gdiplus::Color
+GetIsCameraMatrix() const : bool
+GetIsTransformMatrix() const : bool
+GetRect() const : const Gdiplus::RectF &
+GetThickness() const : float
+Render(HDC hdc) : void
+SetColor(Gdiplus::Color c) : void
+SetIsCameraMatrix(bool v) : void
+SetIsTransformMatrix(bool v) : void
+SetRect(const Gdiplus::RectF & r) : void
+SetRect(Vec2 & p_min, Vec2 & p_max) : void
+SetRect(float p_x, float p_y, float p_width, float p_height) : void
+SetThickness(float t) : void
+Start() : void
+Update(float dt) : void
__
#color : Gdiplus::Color
#enabled : bool
#m_ISCameraMatrix : bool
#m_ISTransformMatrix : bool
#rect : Gdiplus::RectF
#thickness : float
}
class "DebugText" as C_0009292021707070627199
class C_0009292021707070627199 {
+DebugText() : void
+DebugText(const Vec2 & p_pos, Gdiplus::Color c = Gdiplus::Color(255, 255, 0, 0), int p_fontsize = 18) : void
+~DebugText() = default : void
..
+GetColor() const : Gdiplus::Color
+GetFontSize() const : int
+GetIsCameraMatrix() const : bool
+GetIsTransformMatrix() const : bool
+GetPosition(Vec2 & p_pos, Vec2 & p_end) const : void
+GetText() const : const std::wstring &
+Initlize() : void
+Render(HDC hdc) : void
+SetColor(Gdiplus::Color c) : void
+SetFontSize(int t) : void
+SetIsCameraMatrix(bool v) : void
+SetIsTransformMatrix(bool v) : void
+SetPosition(const Vec2 & p_pos) : void
+SetText(const std::wstring & text) : void
+Start() : void
+Update(float dt) : void
__
#FontSize : int
#Position : Vec2
#color : Gdiplus::Color
#enabled : bool
#family : Gdiplus::FontFamily *
#font : Gdiplus::Font *
#m_ISCameraMatrix : bool
#m_ISTransformMatrix : bool
#m_Text : std::wstring
}
class "SingletonT<DebugObjectManager>" as C_0011886883320507445221
class C_0011886883320507445221 {
__
}
class "DebugObjectManager" as C_0006671170546776371142
class C_0006671170546776371142 {
+DebugObjectManager() = default : void
+~DebugObjectManager() : void
..
#AddDebugLine_ResizeCount(int p_addsize) : void
#AddDebugRect_ResizeCount(int p_addsize) : void
#AddDebugText_ResizeCount(int p_addsize) : void
+AllDebugRender(HDC p_hdc) : void
+AllDebugUpdate(float dt) : void
+DrawDebugText(std::wstring p_str, Vec2 & p_pos, Gdiplus::Color color = Gdiplus::Color(255, 255, 0, 0)) : DebugText *
+DrawLine(Vec2 & p_st, Vec2 & p_end, float p_thickness = 1.f, Gdiplus::Color color = Gdiplus::Color(255, 255, 0, 0)) : DebugLineComponent *
+DrawRectLine(Vec2 & p_min, Vec2 & p_max, float p_thickness = 1.f, Gdiplus::Color color = Gdiplus::Color(255, 255, 0, 0)) : DebugRectLineComponent *
+DrawRectLine(float p_x, float p_y, float p_width, float p_height, float p_thickness = 1.f, Gdiplus::Color color = Gdiplus::Color(255, 255, 0, 0)) : DebugRectLineComponent *
+Initialize() : void
+IsAllDebug() const : bool
+ResetAllDebugObjects() : void
+SetAllDebug(bool v) : void
__
#m_CacheDebugTextSize : int
#m_CacheLineSize : int
#m_CacheRectSize : int
#m_DebugLineVec : std::vector<std::unique_ptr<DebugLineComponent>>
#m_DebugObjects : std::vector<DebugObject *>
#m_DebugRectLineVec : std::vector<std::unique_ptr<DebugRectLineComponent>>
#m_DebugTextCount : int
#m_DebugTextVec : std::vector<std::unique_ptr<DebugText>>
#m_ISAllDebug : bool
#m_LineCount : int
#m_RectLineCount : int
}
class "MyMath" as C_0015695959574086753925
class C_0015695959574086753925 {
+MyMath() = default : void
+~MyMath() constexpr = default : void
..
{static} #DegToRad(float deg) : float
{static} +GetBoundBox(const Gdiplus::Matrix * p_transform_mat, const Gdiplus::Matrix * p_camera_mat, const float & width, const float & height, Gdiplus::RectF * p_rect) : Gdiplus::Status
{static} +GetBoundBox(const Gdiplus::Matrix * p_srcmat, const Gdiplus::Matrix * p_camera_mat, const SizeF & size, Gdiplus::RectF * p_rect) : Gdiplus::Status
{static} +GetMatrix(Gdiplus::Matrix * p_srcmat, const Vec2 & pos, const Gdiplus::SizeF & scale, float rotation) : Gdiplus::Status
{static} #RadToDeg(float rad) : float
{static} +SetRect(Gdiplus::RectF * p_rect, const Vec2 & pos, const Gdiplus::SizeF & size) : Gdiplus::Status
{static} +SetRect(Gdiplus::RectF * p_rect, const Vec2 & p_min, const Vec2 & p_max) : Gdiplus::Status
__
}
class "LineComponent" as C_0009691662641127124450
class C_0009691662641127124450 {
+LineComponent(const Gdiplus::PointF & s, const Gdiplus::PointF & e, Gdiplus::Color c = Gdiplus::Color(255, 0, 255, 0), float thick = 1.0f) : void
+~LineComponent() = default : void
..
+GetColor() const : Gdiplus::Color
+GetIsCameraMatrix() const : bool
+GetIsTransformMatrix() const : bool
+GetThickness() const : float
+Render(HDC hdc) : void
+SetColor(Gdiplus::Color c) : void
+SetIsCameraMatrix(bool v) : void
+SetIsTransformMatrix(bool v) : void
+SetPoints(const Gdiplus::PointF & s, const Gdiplus::PointF & e) : void
+SetThickness(float t) : void
+Start() : void
+Update(float dt) : void
__
#color : Gdiplus::Color
#end : Gdiplus::PointF
#m_ISCameraMatrix : bool
#m_ISTransformMatrix : bool
#start : Gdiplus::PointF
#thickness : float
}
class "RectLineComponent" as C_0011912902467100122064
class C_0011912902467100122064 {
+RectLineComponent(const Gdiplus::RectF & r, Gdiplus::Color c = Gdiplus::Color(255, 255, 0, 0), float thick = 1.0f) : void
+~RectLineComponent() = default : void
..
+GetColor() const : Gdiplus::Color
+GetIsCameraMatrix() const : bool
+GetIsTransformMatrix() const : bool
+GetRect() const : const Gdiplus::RectF &
+GetThickness() const : float
+Render(HDC hdc) : void
+SetColor(Gdiplus::Color c) : void
+SetIsCameraMatrix(bool v) : void
+SetIsTransformMatrix(bool v) : void
+SetRect(const Gdiplus::RectF & r) : void
+SetThickness(float t) : void
+Start() : void
+Update(float dt) : void
__
-color : Gdiplus::Color
-m_ISCameraMatrix : bool
-m_ISTransformMatrix : bool
-rect : Gdiplus::RectF
-thickness : float
}
enum "E_MOUSEETYPE" as C_0002707729954124650755
enum C_0002707729954124650755 {
LEFT
RIGHT
MIDDLE
MAX
}
class "InputManager" as C_0007529291253653007674
class C_0007529291253653007674 {
{static} +GetMousePosition() : POINT
{static} +ISKeyDown(int key) : bool
{static} +ISKeyUp(int key) : bool
{static} +ISMouseDown(E_MOUSEETYPE btn) : bool
{static} +ISMouseUp(E_MOUSEETYPE btn) : bool
{static} +Init() : void
{static} +IsKeyPressed(int key) : bool
{static} +IsMouseLeftDown() : bool
{static} +KeyDown(WPARAM key) : void
{static} +KeyUp(WPARAM key) : void
{static} +MouseDown(UINT message, WPARAM btn) : void
{static} +MouseMove(LPARAM lParam) : void
{static} +MouseUp(UINT message, WPARAM btn) : void
{static} +ResetAllKey() : void
__
{static} +iskeys_down : bool[256]
{static} +iskeys_up : bool[256]
{static} +ismouse_down : bool[3]
{static} +ismouse_up : bool[3]
{static} +keys : bool[256]
{static} +mouseLeftDown : bool
{static} +mouseMiddleDown : bool
{static} +mousePosition : POINT
{static} +mouseRightDown : bool
}
class "Material" as C_0012798265388312005056
class C_0012798265388312005056 {
+Material(Gdiplus::Image * img = nullptr) : void
..
+SetUV(int left, int top, int width, int height) : void
__
+image : Gdiplus::Image *
+uvRect : Gdiplus::Rect
}
class "MyString" as C_0006543205476927866422
class C_0006543205476927866422 {
+MyString() = default : void
+~MyString() constexpr = default : void
..
+convert_ansi_to_unicode_string(std::wstring & unicode, const char * ansi, const size_t ansi_size) : DWORD
+convert_unicode_to_ansi_string(std::string & ansi, const wchar_t * unicode, const size_t unicode_size) : DWORD
{static} +format_string(const std::string fmt) : std::string
{static} +format_string<Args...>(const std::string & format, Args... args) : std::string
__
}
class "MyTime" as C_0012543508281110658058
class C_0012543508281110658058 {
__
}
class "SingletonT<MyUtil>" as C_0018360792939543365666
class C_0018360792939543365666 {
__
}
class "MyUtil" as C_0013713340247719435639
class C_0013713340247719435639 {
+MyUtil() = default : void
+~MyUtil() constexpr = default : void
..
{static} +GetRandFloat(float p_min = 0.f, float p_max = 1.f) : float
{static} +GetRandInt(int p_min = 0, int p_max = 100) : int
__
}
class "Viewport" as C_0012676504793219311971
class C_0012676504793219311971 {
+GetViewRect() const : const Gdiplus::RectF &
+IsVisible(const Vec2 & screenPos, float width, float height) const : bool
+SetViewRect(float x, float y, float width, float height) : void
__
-viewRect : Gdiplus::RectF
}
class "SingletonT<GameObjectManager>" as C_0009082757426868238184
class C_0009082757426868238184 {
__
}
class "GameObjectManager" as C_0005560623204830570427
class C_0005560623204830570427 {
+GameObjectManager() = default : void
+~GameObjectManager() : void
..
+CreateObject(const std::string & name) : GameObject *
{static} +CreateObjectS(const std::string & name) : GameObject *
+DestroyObject(GameObject * obj) : void
{static} +DestroyObjectS(GameObject * obj) : void
__
#objects : std::vector<std::unique_ptr<GameObject>>
}
class "SingletonT<FacadeManager>" as C_0014693033089461591607
class C_0014693033089461591607 {
__
}
class "FacadeManager" as C_0016140491647462731610
class C_0016140491647462731610 {
+FacadeManager() : void
+~FacadeManager() : void
..
+DestroyAllManagers() : void
+Initlize() : void
+Release() : void
__
}
class "Scene" as C_0005375663403181666835
class C_0005375663403181666835 {
+CreateObject(const std::string & name) : GameObject *
+DestroyObject(GameObject * obj) : void
+Release() : void
+Render(HDC p_hdc) : void
+Start() : void
+Update(float dt) : void
__
+objects : std::vector<std::unique_ptr<GameObject>>
}
class "Button" as C_0000221405838615140689
class C_0000221405838615140689 {
+Button() = default : void
+Button(const std::function<void (Button *)> & onClick) : void
+~Button() = default : void
..
-ISClick() : bool
+Render(HDC hdc) : void
+Update(float dt) : void
__
+isHovered : bool
+isPressed : bool
#m_DefaultColor : Gdiplus::Color
#m_HoverColor : Gdiplus::Color
#m_PressColor : Gdiplus::Color
-m_TempTransMatrix : Gdiplus::Matrix
-matrixElements : Gdiplus::REAL[6]
+onClick : std::function<void (Button *)>
}
class "InputFieldComponent" as C_0014246112670391732192
class C_0014246112670391732192 {
+Backspace() : void
+Draw(HDC hdc) : void
+InputChar(wchar_t c) : void
+SetFocus(bool isFocused) : void
+SetOnChange(std::function<void (const std::wstring &)> callback) : void
+SetPlaceholder(const std::wstring & hint) : void
+SetTransform(Transform * t) : void
__
-focused : bool
-onChange : std::function<void (const std::wstring &)>
-placeholder : std::wstring
-text : std::wstring
-transform : Transform *
}
class "RichTextComponent" as C_0006468325429240224623
class C_0006468325429240224623 {
+RichTextComponent() = default : void
+~RichTextComponent() : void
..
+Draw(HDC hdc) : void
+Initialize() : void
+Initialize_AddCompoment() : void
-ParseColor(const std::wstring & hex) : Gdiplus::Color
-ParseRichText() : void
+Release() : void
+Render(HDC hdc) : void
+SetAlignment(Gdiplus::StringAlignment horizontal, Gdiplus::StringAlignment vertical) : void
+SetFont(const std::wstring & family, float size) : void
+SetOutline(bool use, BYTE a, BYTE r, BYTE g, BYTE b) : void
+SetSize(int w, int h) : void
+SetStyle(bool bold, bool italic, bool underline) : void
+SetText(const std::wstring & text) : void
+SetTransform(Transform * t) : void
+Update(float dt) : void
__
-family : Gdiplus::FontFamily *
-font : Gdiplus::Font *
-fontFamily : std::wstring
-fontSize : float
-fontStyle : int
-hAlign : Gdiplus::StringAlignment
-height : int
-outlineColor : Gdiplus::Color
-parsedSegments : std::vector<TextSegment>
-rawText : std::wstring
-transform : Transform *
-useOutline : bool
-vAlign : Gdiplus::StringAlignment
-width : int
}
class "RichTextComponent::TextSegment" as C_0010200758658661813511
class C_0010200758658661813511 {
__
+color : Gdiplus::Color
+text : std::wstring
}
class "TextComponent" as C_0012700147483782556045
class C_0012700147483782556045 {
+TextComponent() : void
+~TextComponent() : void
..
+EnableBlinking(bool enabled) : void
+GetIsCameraMatrix() const : bool
+Initialize() : void
+Initialize_AddCompoment() : void
+Release() : void
+Render(HDC hdc) : void
+SetAlignment(Gdiplus::StringAlignment horizontal, Gdiplus::StringAlignment vertical) : void
+SetFont(const std::wstring & family, float size) : void
+SetFontColor(BYTE a, BYTE r, BYTE g, BYTE b) : void
+SetIsCameraMatrix(bool value) : void
+SetOutlineColor(BYTE a, BYTE r, BYTE g, BYTE b) : void
+SetSize(int w, int h) : void
+SetText(const std::wstring & str) : void
+SetTransform(Transform * t) : void
+Update(float dt) : void
__
-elapsedTime : double
-family : Gdiplus::FontFamily *
-font : Gdiplus::Font *
-fontColor : Gdiplus::Color
-fontFamily : std::wstring
-fontSize : float
-hAlign : Gdiplus::StringAlignment
-height : int
-m_ISCameraMatrix : bool
-outlineColor : Gdiplus::Color
-text : std::wstring
-transform : Transform *
-useBlink : bool
-useOutline : bool
-vAlign : Gdiplus::StringAlignment
-width : int
}
class "BaseGame" as C_0005365101254653150826
class C_0005365101254653150826 {
+BaseGame() : void
+~BaseGame() : void
..
+AllUpdate() : void
+CleanUp() : void
+Init(HWND p_hwnd) : void
#InitGDIPlus() : void
+Release() : void
#ReleaseGDIPlus() : void
+Render(HDC p_hdc, RECT & p_clientRect) : void
+Run() : void
+SetHwnd(HWND hwnd) : void
+SetWindowSize(HWND hwnd) : void
+Test_InitScene() : void
#Update() : void
+UpdateDebugEnd() : void
+UpdateInput(UINT message, WPARAM wParam, LPARAM lParam) : void
#UpdateInputReset() : void
#UpdateTimer() : void
__
#gdiplusToken : ULONG_PTR
+isRunning : bool
#m_BGColor : COLORREF
+m_CurrentScene : Scene *
#m_Hwnd : HWND
#m_pInputManager : InputManager *
#m_pTimerManager : TimerManager *
}
class "TimerManager" as C_0006104864286880803545
class C_0006104864286880803545 {
+TimerManager() : void
..
+GetDeltaTime() const : double
+GetFPS() : float
+GetTotalTime() const : double
+Update() : void
__
-deltaTime : double
-fps : float
-frequency : LARGE_INTEGER
-lastTime : LARGE_INTEGER
-startTime : LARGE_INTEGER
-totalTime : double
}
C_0008364433741114752039 o-- C_0016480947060394780245 : +pos
C_0012021292812520796288 --> C_0010250684592540512228 : +owner
C_0012021292812520796288 --> C_0013979161094353040123 : +transform
C_0006111862596534002478 ..> C_0013979161094353040123
C_0006111862596534002478 o-- C_0016480947060394780245 : #cachedWorldPosition
C_0006111862596534002478 o-- C_0016480947060394780245 : #cachedWorldScale
C_0012021292812520796288 <|-- C_0006111862596534002478
C_0010250684592540512228 o-- C_0012021292812520796288 : #components
C_0010250684592540512228 --> C_0013979161094353040123 : +transform
C_0013979161094353040123 o-- C_0016480947060394780245 : +localposition
C_0013979161094353040123 o-- C_0016480947060394780245 : +localScale
C_0013979161094353040123 o-- C_0016480947060394780245 : +PivotPos
C_0013979161094353040123 o-- C_0016480947060394780245 : +cachedPivotPos
C_0013979161094353040123 --> C_0013979161094353040123 : -parent
C_0013979161094353040123 --> C_0013979161094353040123 : -children
C_0013979161094353040123 o-- C_0016480947060394780245 : -cachedWorldPosition
C_0013979161094353040123 o-- C_0016480947060394780245 : -cachedWorldScale
C_0013979161094353040123 <.. C_0010250684592540512228 : +<<friend>>
C_0012021292812520796288 <|-- C_0013979161094353040123
C_0013661311382128640226 ..> C_0010602408877764505757
C_0013661311382128640226 ..|> C_0011044441207668165372
C_0010602408877764505757 --> C_0006111862596534002478 : #m_AllCameraVec
C_0010602408877764505757 --> C_0006111862596534002478 : #m_MainCamera
C_0010602408877764505757 o-- C_0016480947060394780245 : #m_WindowSize
C_0010602408877764505757 o-- C_0016480947060394780245 : #m_ViewportCenter
C_0013661311382128640226 <|-- C_0010602408877764505757
C_0012662634402439666456 o-- C_0016480947060394780245 : +p1
C_0012662634402439666456 o-- C_0016480947060394780245 : +p2
C_0014710440344490690589 ..> C_0016480947060394780245
C_0014710440344490690589 ..> C_0012662634402439666456
C_0014710440344490690589 ..> C_0005411490672434116202
C_0012021292812520796288 <|-- C_0014710440344490690589
C_0005411490672434116202 ..> C_0016480947060394780245
C_0005411490672434116202 ..> C_0012662634402439666456
C_0014710440344490690589 <|-- C_0005411490672434116202
C_0007426470158294810457 --> C_0013979161094353040123 : -transform
C_0012021292812520796288 <|-- C_0007426470158294810457
C_0011492085545754070408 ..> C_0017393003743977498017
C_0011492085545754070408 ..|> C_0011044441207668165372
C_0017393003743977498017 --> C_0000370005033936394450 : -imageMap
C_0011492085545754070408 <|-- C_0017393003743977498017
C_0017289291423747156513 o-- C_0016480947060394780245 : #startPoint
C_0017289291423747156513 o-- C_0016480947060394780245 : #endPoint
C_0013047365441492111311 <|-- C_0017289291423747156513
C_0013979161094353040123 <|-- C_0017289291423747156513
C_0013402360081878303675 ..> C_0016480947060394780245
C_0013047365441492111311 <|-- C_0013402360081878303675
C_0013979161094353040123 <|-- C_0013402360081878303675
C_0009292021707070627199 o-- C_0016480947060394780245 : #Position
C_0013047365441492111311 <|-- C_0009292021707070627199
C_0013979161094353040123 <|-- C_0009292021707070627199
C_0011886883320507445221 ..> C_0006671170546776371142
C_0011886883320507445221 ..|> C_0011044441207668165372
C_0006671170546776371142 ..> C_0016480947060394780245
C_0006671170546776371142 --> C_0013047365441492111311 : #m_DebugObjects
C_0006671170546776371142 o-- C_0013402360081878303675 : #m_DebugRectLineVec
C_0006671170546776371142 o-- C_0017289291423747156513 : #m_DebugLineVec
C_0006671170546776371142 o-- C_0009292021707070627199 : #m_DebugTextVec
C_0011886883320507445221 <|-- C_0006671170546776371142
C_0015695959574086753925 ..> C_0016480947060394780245
C_0012021292812520796288 <|-- C_0009691662641127124450
C_0012021292812520796288 <|-- C_0011912902467100122064
C_0007529291253653007674 ..> C_0002707729954124650755
C_0018360792939543365666 ..> C_0013713340247719435639
C_0018360792939543365666 ..|> C_0011044441207668165372
C_0018360792939543365666 <|-- C_0013713340247719435639
C_0012676504793219311971 ..> C_0016480947060394780245
C_0009082757426868238184 ..> C_0005560623204830570427
C_0009082757426868238184 ..|> C_0011044441207668165372
C_0005560623204830570427 o-- C_0010250684592540512228 : #objects
C_0009082757426868238184 <|-- C_0005560623204830570427
C_0014693033089461591607 ..> C_0016140491647462731610
C_0014693033089461591607 ..|> C_0011044441207668165372
C_0014693033089461591607 <|-- C_0016140491647462731610
C_0005375663403181666835 o-- C_0010250684592540512228 : +objects
C_0000221405838615140689 --> C_0000221405838615140689 : +onClick
C_0012021292812520796288 <|-- C_0000221405838615140689
C_0014246112670391732192 --> C_0013979161094353040123 : -transform
C_0006468325429240224623 --> C_0013979161094353040123 : -transform
C_0012021292812520796288 <|-- C_0006468325429240224623
C_0010200758658661813511 --+ C_0006468325429240224623
C_0012700147483782556045 --> C_0013979161094353040123 : -transform
C_0012021292812520796288 <|-- C_0012700147483782556045
C_0005365101254653150826 --> C_0005375663403181666835 : +m_CurrentScene
C_0005365101254653150826 --> C_0006104864286880803545 : #m_pTimerManager
C_0005365101254653150826 --> C_0007529291253653007674 : #m_pInputManager
note top : Generated by clang-uml

'Generated with clang-uml, version 0.6.2
'LLVM version clang version 20.1.7 (https://github.com/llvm/llvm-project.git 6146a88f60492b520a36f8f8f3231e15f3cc6082)
@enduml
